// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chat {
  id       String        @id @unique @default(uuid())
  game     Game?
  messages ChatMessage[]
}

// chat messages need user and chat ids
model ChatMessage {
  id          String   @id @unique @default(uuid())
  messageText String
  createdAt   DateTime @default(now())
  owner       User     @relation(fields: [userId], references: [id])
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      String
  userId      String
}

model Deck {
  id       String     @id @unique @default(uuid())
  User     User?      @relation(fields: [userId], references: [id])
  userId   String?
  cards    Card[]
  PlayDeck PlayDeck[]
}

// cards in use = all cards at time the game starts
model PlayDeck {
  id         String      @id @unique @default(uuid())
  cardsInUse CardInUse[]
  Player     Player[]
  deckInUse  Deck        @relation(fields: [deckId], references: [id])
  deckId     String
}

// corpTypes = [Agenda, Ice, Operation, Node, Upgrade]
// runTypes = [Program, Prep, Resource, Hardware]
// baseInts (cardType === "Agenda") = [baseCost 0, agendaPoints 1]
// baseInts (corpTypes.has(cardType)) = [baseCost 0, baseTrash 2, baseStrength]
// baseInts (else) = [baseCost 0, memCost 1, baseStrength 2, costToStrengthen 3, costToBreak 4, baseLink 5]

model Card {
  id           String      @id @unique @default(uuid())
  cardName     String
  flavorText   String?
  effectText   String
  cardType     String
  cardSubTypes String[]
  baseInts     Int[]
  imageUrl     String
  CardInUse    CardInUse[]
  Deck         Deck?       @relation(fields: [deckId], references: [id])
  deckId       String?
}

model User {
  id          String        @id @unique @default(uuid())
  username    String
  password    String
  player      Player[]
  game        Game[]
  deck        Deck[]
  chatMessage ChatMessage[]
}

// agendaPoints = [corp 0, runner 1, toWin 2]
model Game {
  id           String   @id @unique @default(uuid())
  turn         Int
  isCorpTurn   Boolean  @default(true)
  isActive     Boolean  @default(true)
  agendaPoints Int[]
  rolls        Roll[]
  players      Player[]
  chat         Chat?    @relation(fields: [chatId], references: [id])
  winner       User?    @relation(fields: [winnerId], references: [id])
  chatId       String?  @unique
  winnerId     String?
}

model Player {
  id             String      @id @unique @default(uuid())
  bits           Int         @default(5)
  maxHandSize    Int         @default(5)
  maxActions     Int         @default(4)
  currentActions Int         @default(4)
  isCorpTurn     Boolean     @default(false)
  token          Token[]
  Roll           Roll[]
  CardStack      CardStack[]
  deck           PlayDeck    @relation(fields: [playDeckId], references: [id])
  game           Game        @relation(fields: [gameId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
  playDeckId     String
  gameId         String
  userId         String
}

model CardStack {
  id          String      @id @unique @default(uuid())
  dataForts   CardStack[] @relation("dataForts")
  player      Player      @relation(fields: [playerId], references: [id])
  corpInstall CardSlot?   @relation("corpInstalled")
  corpUpg     CardSlot?   @relation("corpUpgrade")
  dfStack     CardStack?  @relation("dataForts", fields: [dfStackId], references: [id])
  playerId    String
  dfStackId   String?
}

model CardSlot {
  id          String     @id @unique @default(uuid())
  position    Int?
  card        CardInUse  @relation(fields: [cardInUseId], references: [id])
  corpIns     CardStack? @relation("corpInstalled", fields: [corpInsId], references: [id])
  corpUpg     CardStack? @relation("corpUpgrade", fields: [corpUpgId], references: [id])
  cardInUseId String     @unique
  corpInsId   String?    @unique
  corpUpgId   String?    @unique
}

// CardInUse holds state on the card
// modifiers = rezzed, public, installed [] Strings, if array contains it, then true (use with set and modifiers.has())
// changes = strength, cost, trashcost [0, 1, 2] positive or negative Int
model CardInUse {
  id         String    @id @unique @default(uuid())
  card       Card      @relation(fields: [cardId], references: [id])
  modifiers  String[]
  changes    Int[]
  tokens     Token[]
  CardSlot   CardSlot?
  PlayDeck   PlayDeck? @relation(fields: [playDeckId], references: [id])
  cardId     String
  playDeckId String?
}

model Roll {
  id       String @id @unique @default(uuid())
  value    Int
  turn     Int
  player   Player @relation(fields: [playerId], references: [id])
  game     Game   @relation(fields: [gameId], references: [id])
  gameId   String
  playerId String
}

model Token {
  id          String     @id @unique @default(uuid())
  number      Int        @default(1)
  name        String
  effect      String
  Player      Player?    @relation(fields: [playerId], references: [id])
  CardInUse   CardInUse? @relation(fields: [cardInUseId], references: [id])
  playerId    String?
  cardInUseId String?
}
