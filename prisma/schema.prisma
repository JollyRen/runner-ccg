// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chat {
  id       String        @id @unique @default(uuid())
  game     Game?         @relation(fields: [gameId], references: [id])
  users    User[]
  messages ChatMessage[]
  gameId   String?
}

// chat messages need user and chat ids
model ChatMessage {
  id          String   @id @unique @default(uuid())
  messageText String
  createdAt   DateTime @default(now())
  owner       User     @relation(fields: [userId], references: [id])
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      String
  userId      String
}

model Deck {
  id       String     @id @unique @default(uuid())
  User     User?      @relation(fields: [userId], references: [id])
  userId   String?
  cards    Card[]
  PlayDeck PlayDeck[]
}

model PlayDeck {
  id         String      @id @unique @default(uuid())
  isCorp     Boolean
  cardsInUse CardInUse[]
  deckInUse  Deck        @relation(fields: [deckId], references: [id])
  deckId     String
  Player     Player[]
}

model Card {
  id               String      @id @unique @default(uuid())
  cardName         String
  flavorText       String?
  effectText       String
  cardType         String
  cardSubTypes     String[]
  isCorp           Boolean
  baseCost         Int         @default(0)
  baseStrength     Int?
  baseLink         Int?
  costToStrengthen Int?
  costToBreak      Int?
  memCost          Int?
  baseTrash        Int?
  imageUrl         CardImage   @relation(fields: [cardImageId], references: [id])
  cardImageId      String
  runnerCardId     String?
  Deck             Deck?       @relation(fields: [deckId], references: [id])
  deckId           String?
  agendaPoints     Int?
  isAgenda         Boolean     @default(false)
  CardInUse        CardInUse[]
}

model CardImage {
  id    String @id @unique @default(uuid())
  value String
  card  Card[]
}

model CardInUse {
  id         String     @id @unique @default(uuid())
  card       Card       @relation(fields: [cardId], references: [id])
  modifiers  Modifier[]
  CardSlot   CardSlot[]
  PlayDeck   PlayDeck?  @relation(fields: [playDeckId], references: [id])
  cardId     String
  playDeckId String?
}

model Modifier {
  id             String     @id @unique @default(uuid())
  strengthChange Int?
  costChange     Int?
  trashChange    Int?
  hasProgam      CardSlot?  @relation(fields: [cardSlotId], references: [id])
  CardInUse      CardInUse? @relation(fields: [cardInUseId], references: [id])
  cardInUseId    String?
  programSlotId  String?
  cardSlotId     String?
}

model User {
  id          String        @id @unique @default(uuid())
  username    String
  password    String
  Player      Player[]
  Game        Game[]
  Deck        Deck[]
  Chat        Chat?         @relation(fields: [chatId], references: [id])
  chatId      String?
  ChatMessage ChatMessage[]
}

model Game {
  id         String   @id @unique @default(uuid())
  turn       Int
  isCorpTurn Boolean  @default(true)
  isActive   Boolean  @default(true)
  rAP        Int      @default(0)
  cAP        Int      @default(0)
  apToWin    Int      @default(7)
  rolls      Roll[]
  players    Player[]
  Chat       Chat[]
  winner     User?    @relation(fields: [winnerId], references: [id])
  winnerId   String?
}

model Player {
  id             String      @id @unique @default(uuid())
  bits           Int         @default(5)
  maxHandSize    Int         @default(5)
  maxActions     Int         @default(4)
  currentActions Int         @default(4)
  isCorp         Boolean     @default(false)
  token          Token[]
  Roll           Roll[]
  CardStack      CardStack[]
  deck           PlayDeck    @relation(fields: [playDeckId], references: [id])
  game           Game        @relation(fields: [gameId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
  playDeckId     String
  gameId         String
  userId         String
}

model CardStack {
  id          String      @id @unique @default(uuid())
  dataForts   CardStack[] @relation("dataForts")
  player      Player      @relation(fields: [playerId], references: [id])
  corpInstall CardSlot?   @relation("corpInstalled")
  corpUpg     CardSlot?   @relation("corpUpgrade")
  dfStack     CardStack?  @relation("dataForts", fields: [dfStackId], references: [id])
  playerId    String
  dfStackId   String?
}

model CardSlot {
  id          String     @id @unique @default(uuid())
  position    Int?
  isCyberDeck Boolean    @default(false)
  installed   CardSlot[] @relation("instRunCards")
  Modifier    Modifier[]
  card        CardInUse  @relation(fields: [cardInUseId], references: [id])
  corpIns     CardStack? @relation("corpInstalled", fields: [corpInsId], references: [id])
  corpUpg     CardStack? @relation("corpUpgrade", fields: [corpUpgId], references: [id])
  insCard     CardSlot?  @relation("instRunCards", fields: [insCardId], references: [id])
  cardInUseId String
  corpInsId   String?    @unique
  corpUpgId   String?    @unique
  insCardId   String?
}

model Roll {
  id       String @id @unique @default(uuid())
  value    Int
  turn     Int
  player   Player @relation(fields: [playerId], references: [id])
  game     Game   @relation(fields: [gameId], references: [id])
  gameId   String
  playerId String
}

model Token {
  id       String  @id @unique @default(uuid())
  number   Int     @default(1)
  name     String
  effect   String
  Player   Player? @relation(fields: [playerId], references: [id])
  playerId String?
}
